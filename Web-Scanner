#!/bin/bash
#
#Web-Scanner{Full}
#
#Web-Scanner tiene como objetivo analizar los distintos sitios web para la posterior auditoría de los mismos.
#
#Web-Scanner ha sido desarrollado por @ShadowVMX && @Japinper.
#
#Versión actual [v2.2].
#


trap exitingit INT

exitingit(){
	echo " "
	echo " "
	echo "$(tput setaf 6)[$(tput setaf 1)-$(tput setaf 6)]Saliendo ... "
	sleep 1
	echo " "
	exit
}

if [ "$(id -u)" == "0" ]; then
	echo -n "$(tput setaf 6)" ; figlet Web-Scanner ; echo "$(tput setaf 3)                                                             v2.2"
	echo "$(tput setaf 11)_________________________________________________________________"
	echo " "
	echo "$(tput setaf 6)Desarrollado para el análisis web por  $(tput setaf 1)-->   $(tput setaf 6)@ShadowVMX @Japinper"
	echo "$(tput setaf 11)_________________________________________________________________"
	echo " "
	echo " "

	echo " "
	read -p "$(tput setaf 2)Ingrese el nombre del proyecto: " projectname
	sleep 1

	echo " "

	rm -r "$projectname" 2>/dev/null

	mkdir "$projectname" 2>/dev/null

	echo "$(tput setaf 6)[$(tput setaf 1)*$(tput setaf 6)]Carpeta creada en la ubicación actual."
	echo " "
	sleep 1

	read -p "$(tput setaf 2)Ingrese la URL: " URLNAME
	echo "$(tput setaf 5) "

	echo "--------------------------------------------------------------"

	echo " "

	pingit=`echo "$URLNAME" | sed 's/https:\/\///g' | sed 's/http:\/\///g' | awk '{print $1}' FS="/"`

	echo -n "$(tput setaf 6)[$(tput setaf 1)*$(tput setaf 6)]IP de la Web solicitada --> $(tput setaf 1)" && ping -c 1 $pingit | grep -oP '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | sort -u

	ping -c 1 $pingit | grep -oP '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | sort -u > IPWeb

	mv IPWeb "$projectname" 2>/dev/null


	echo "$(tput setaf 5) "
	echo "---------------------------------------------------------------"
	echo " "

	fullip=`ping -c 1 $pingit | grep -oP '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | sort -u`

	echo "$(tput setaf 3)"

	whatweb $URLNAME -v | tee whatweb

	echo "$(tput setaf 5) "
	echo "---------------------------------------------------------------"
	echo " "

	echo "$(tput setaf 6)[$(tput setaf 1)*$(tput setaf 6)]Buscando posibles correos ..."
	echo " "

	html2text whatweb > posiblescorreos
	grep -o '[[:alnum:]+\.\_\-]*@[[:alnum:]+\.\_\-]*' posiblescorreos | sort | uniq -i > posiblescorreos.txt

	echo "$(tput setaf 6)[$(tput setaf 1)*$(tput setaf 6)]Completado."

	rm posiblescorreos 2>/dev/null

	mv whatweb "$projectname" 2>/dev/null
	mv posiblescorreos.txt "$projectname" 2>/dev/null

	sleep 1.3
	echo "$(tput setaf 5)"
	echo "---------------------------------------------------------------"
	echo " "

	echo "$(tput setaf 6)[$(tput setaf 1)*$(tput setaf 6)]Reportando información acerca de la IP obtenida: "
	echo "$(tput setaf 3) "

	whois $(cat "$projectname/IPWeb") | grep -v "%" > "$projectname/whoistheIP"
	head -n -3 "$projectname/whoistheIP" | sponge "$projectname/whoistheIP"
	tail -n +4 "$projectname/whoistheIP" | sponge "$projectname/whoistheIP"
	cat "$projectname/whoistheIP" 2>/dev/null

	sleep 1.5
	echo "$(tput setaf 5)"
	echo "---------------------------------------------------------------"
	echo " "
	echo "$(tput setaf 6)[$(tput setaf 1)*$(tput setaf 6)]Llevando a cabo OSINT con IPsint: "
	echo "$(tput setaf 3) "
	token="7d1cd5f4bcce46f78d62ceeedd4542da"

	ipsint --ip $(cat "$projectname/IPWeb") --api "$token" | tee "$projectname/IPsint"

	sleep 1.5

	echo "$(tput setaf 5)"
	echo "---------------------------------------------------------------"
	echo " "
	echo "$(tput setaf 6)[$(tput setaf 1)*$(tput setaf 6)]Reportando puertos abiertos: "
	echo "$(tput setaf 3)"
	nmap -sS --min-rate 5000 -n $(cat "$projectname/IPWeb") -oG "$projectname/PuertosAbiertos"

	echo "$(tput setaf 5)"
	echo "---------------------------------------------------------------"
	echo " "

	extractports "$projectname/PuertosAbiertos"

	sleep 1.5
	echo "$(tput setaf 5)"
	echo "---------------------------------------------------------------"

	echo "$(tput setaf 6)[$(tput setaf 1)*$(tput setaf 6)]Reportando la versión de los puertos abiertos: "
	echo "$(tput setaf 3)"

	nmap -sCV --min-rate 5000 -n $(cat "$projectname/IPWeb") -oN "$projectname/VersionPuertosAbiertos"

	sleep 1.5
	echo "$(tput setaf 5)"
	echo "---------------------------------------------------------------"
	echo " "

	echo "$(tput setaf 6)[$(tput setaf 1)*$(tput setaf 6)]Detectando CMS, verificando rutas, usuarios y reporte completo ... Espere un momento..."
	echo "$(tput setaf 3)"

	cmseek -u $URLNAME > "$projectname/CMSdetect"

	echo "$(tput setaf 6)[$(tput setaf 1)*$(tput setaf 6)]Reporte completado."

	sleep 1.5
	echo "$(tput setaf 5) "
	echo "---------------------------------------------------------------"
	echo " "


	echo "$(tput setaf 6)[$(tput setaf 1)*$(tput setaf 6)]Verificando el SO que corre en tu objetivo..."
	echo "$(tput setaf 3)"

	nmap -O --min-rate 5000 -n $(cat "$projectname/IPWeb") > osversion

	cat osversion | grep "Running:" >> $projectname/SO
	cat osversion | grep "Aggressive OS guesses:" >> $projectname/SO
	cat osversion | grep "OS CPE:" >> $projectname/SO
	cat osversion | grep "OS details:" >> $projectname/SO

	rm osversion 2>/dev/null

	echo " "
	echo "$(tput setaf 6)[$(tput setaf 1)*$(tput setaf 6)]Reporte de SO completo."

	sleep 1.5
	echo "$(tput setaf 5) "
	echo "---------------------------------------------------------------"
	echo " "

	echo "$(tput setaf 6)[$(tput setaf 1)*$(tput setaf 6)]Tiempo de carga de la página web: "
	echo "$(tput setaf 3)"
	curl -s -w 'Testing Website Response Time for: %{url_effective}\n\nLookup Time:\t\t%{time_namelookup}\nConnect Time:\t\t%{time_connect}\nPre-transfer Time:\t%{time_pretransfer}\nStart-transfer Time:\t%{time_starttransfer}\n\nTotal Time:\t\t%{time_total}\n' -o /dev/null $URLNAME

	echo "$(tput setaf 5) "
	echo "---------------------------------------------------------------"
	echo " "

	echo "$(tput setaf 6)[$(tput setaf 1)*$(tput setaf 6)]Extrayendo información de forma agresiva (correos, subdominios, hosts...): "
	echo " "

	NameIt=`echo "$URLNAME" | awk -F[/:] '{print $4}'`

	theHarvester -d $NameIt -l 500 -b google > "$projectname/aggresiveinformation.txt" 2>/dev/null

	echo " "
	echo "$(tput setaf 6)[$(tput setaf 1)*$(tput setaf 6)]Completado."

	echo "$(tput setaf 5) "
	echo "---------------------------------------------------------------"
	echo " "

	read -p "$(tput setaf 6)[$(tput setaf 1)*$(tput setaf 6)]Quieres fuzzear directorios? [s/n]: " fuzzing_option

	if [ "$fuzzing_option" == "y" ] || [ "$fuzzing_option" == "yes" ]; then
		echo "$(tput setaf 6)[$(tput setaf 1)*$(tput setaf 6)]Fuzzeando subdirectorios de la URL: "
		echo "$(tput setaf 3)"

		gobuster dir -w /usr/share/wordlists/dirb/common.txt -u $URLNAME > "$projectname/subdirectorios"

		sleep 1.5
		echo " "
		echo "$(tput setaf 6)[$(tput setaf 1)*$(tput setaf 6)]Completado."

		echo "$(tput setaf 5) "
		echo "---------------------------------------------------------------"
		echo " "
	fi

	echo ""
	echo "$(tput setaf 6)[$(tput setaf 1)*$(tput setaf 6)]Informacion almacenada en $(pwd)/${projectname}"
	echo ""
	exit 0
else
	echo ""
	echo "$(tput setaf 6)[$(tput setaf 1)!$(tput setaf 6)]Debe de usarse con root[$(tput setaf 1)!$(tput setaf 6)]"
	echo ""
	exit 0
fi
